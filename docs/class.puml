@startuml

interface ICancelable {
  +{abstract} bool Do()
  +{abstract} void Cancel()
}

abstract CancelableProcessBase {
  +bool Do()
  +void Cancel()
  #{abstract} bool DoImpl()
  #bool ShouldCancel() const
}

class ConcreteProcess {
  -bool DoImpl()
}

ICancelable <|.u. CancelableProcessBase
CancelableProcessBase <|-u- ConcreteProcess

class CProgressDialog {
  +CProgressDialog(CWnd*, std::shared_ptr<ICancelable>)
  +BOOL OnInitDialog()
  #LRESULT OnCloseProgressDialog(WPARAM, LPARAM)
  +void OnBnClickedCancel()
  +void ActionWhenThreadEnds()
}

class MainDialog {
  +void OnBnClickedBtnProcess()
}

CProgressDialog -l-> ICancelable : m_process

MainDialog .l. ConcreteProcess
MainDialog .d. CProgressDialog

@enduml
